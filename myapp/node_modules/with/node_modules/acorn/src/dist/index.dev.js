"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = parse;
exports.parseExpressionAt = parseExpressionAt;
exports.tokenizer = tokenizer;
Object.defineProperty(exports, "Parser", {
  enumerable: true,
  get: function get() {
    return _state.Parser;
  }
});
Object.defineProperty(exports, "plugins", {
  enumerable: true,
  get: function get() {
    return _state.plugins;
  }
});
Object.defineProperty(exports, "defaultOptions", {
  enumerable: true,
  get: function get() {
    return _options.defaultOptions;
  }
});
Object.defineProperty(exports, "Position", {
  enumerable: true,
  get: function get() {
    return _locutil.Position;
  }
});
Object.defineProperty(exports, "SourceLocation", {
  enumerable: true,
  get: function get() {
    return _locutil.SourceLocation;
  }
});
Object.defineProperty(exports, "getLineInfo", {
  enumerable: true,
  get: function get() {
    return _locutil.getLineInfo;
  }
});
Object.defineProperty(exports, "Node", {
  enumerable: true,
  get: function get() {
    return _node.Node;
  }
});
Object.defineProperty(exports, "TokenType", {
  enumerable: true,
  get: function get() {
    return _tokentype.TokenType;
  }
});
Object.defineProperty(exports, "tokTypes", {
  enumerable: true,
  get: function get() {
    return _tokentype.types;
  }
});
Object.defineProperty(exports, "TokContext", {
  enumerable: true,
  get: function get() {
    return _tokencontext.TokContext;
  }
});
Object.defineProperty(exports, "tokContexts", {
  enumerable: true,
  get: function get() {
    return _tokencontext.types;
  }
});
Object.defineProperty(exports, "isIdentifierChar", {
  enumerable: true,
  get: function get() {
    return _identifier.isIdentifierChar;
  }
});
Object.defineProperty(exports, "isIdentifierStart", {
  enumerable: true,
  get: function get() {
    return _identifier.isIdentifierStart;
  }
});
Object.defineProperty(exports, "Token", {
  enumerable: true,
  get: function get() {
    return _tokenize.Token;
  }
});
Object.defineProperty(exports, "isNewLine", {
  enumerable: true,
  get: function get() {
    return _whitespace.isNewLine;
  }
});
Object.defineProperty(exports, "lineBreak", {
  enumerable: true,
  get: function get() {
    return _whitespace.lineBreak;
  }
});
Object.defineProperty(exports, "lineBreakG", {
  enumerable: true,
  get: function get() {
    return _whitespace.lineBreakG;
  }
});
exports.version = void 0;

var _state = require("./state");

require("./parseutil");

require("./statement");

require("./lval");

require("./expression");

require("./location");

var _options = require("./options");

var _locutil = require("./locutil");

var _node = require("./node");

var _tokentype = require("./tokentype");

var _tokencontext = require("./tokencontext");

var _identifier = require("./identifier");

var _tokenize = require("./tokenize");

var _whitespace = require("./whitespace");

// Acorn is a tiny, fast JavaScript parser written in JavaScript.
//
// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and
// various contributors and released under an MIT license.
//
// Git repositories for Acorn are available at
//
//     http://marijnhaverbeke.nl/git/acorn
//     https://github.com/ternjs/acorn.git
//
// Please use the [github bug tracker][ghbt] to report issues.
//
// [ghbt]: https://github.com/ternjs/acorn/issues
//
// This file defines the main parser interface. The library also comes
// with a [error-tolerant parser][dammit] and an
// [abstract syntax tree walker][walk], defined in other files.
//
// [dammit]: acorn_loose.js
// [walk]: util/walk.js
var version = "3.3.0"; // The main exported interface (under `self.acorn` when in the
// browser) is a `parse` function that takes a code string and
// returns an abstract syntax tree as specified by [Mozilla parser
// API][api].
//
// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

exports.version = version;

function parse(input, options) {
  return new _state.Parser(options, input).parse();
} // This function tries to parse a single expression at a given
// offset in a string. Useful for parsing mixed-language formats
// that embed JavaScript expressions.


function parseExpressionAt(input, pos, options) {
  var p = new _state.Parser(options, input, pos);
  p.nextToken();
  return p.parseExpression();
} // Acorn is organized as a tokenizer and a recursive-descent parser.
// The `tokenizer` export provides an interface to the tokenizer.


function tokenizer(input, options) {
  return new _state.Parser(options, input);
}
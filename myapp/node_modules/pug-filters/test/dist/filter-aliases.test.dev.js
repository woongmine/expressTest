"use strict";

var lex = require('pug-lexer');

var parse = require('pug-parser');

var handleFilters = require('../').handleFilters;

var customFilters = {};
test('filters can be aliased', function () {
  var source = "\nscript\n  :cdata:minify\n    function myFunc(foo) {\n      return foo;\n    }\n  ";
  var ast = parse(lex(source, {
    filename: __filename
  }), {
    filename: __filename,
    src: source
  });
  var options = {};
  var aliases = {
    'minify': 'uglify-js'
  };
  var output = handleFilters(ast, customFilters, options, aliases);
  expect(output).toMatchSnapshot();
});
test('we do not support chains of aliases', function () {
  var source = "\nscript\n  :cdata:minify-js\n    function myFunc(foo) {\n      return foo;\n    }\n  ";
  var ast = parse(lex(source, {
    filename: __filename
  }), {
    filename: __filename,
    src: source
  });
  var options = {};
  var aliases = {
    'minify-js': 'minify',
    'minify': 'uglify-js'
  };

  try {
    var output = handleFilters(ast, customFilters, options, aliases);
  } catch (ex) {
    expect({
      code: ex.code,
      message: ex.message
    }).toMatchSnapshot();
    return;
  }

  throw new Error('Expected an exception');
});
test('options are applied before aliases', function () {
  var source = "\nscript\n  :cdata:minify\n    function myFunc(foo) {\n      return foo;\n    }\n  :cdata:uglify-js\n    function myFunc(foo) {\n      return foo;\n    }\n  ";
  var ast = parse(lex(source, {
    filename: __filename
  }), {
    filename: __filename,
    src: source
  });
  var options = {
    'minify': {
      output: {
        beautify: true
      }
    }
  };
  var aliases = {
    'minify': 'uglify-js'
  };
  var output = handleFilters(ast, customFilters, options, aliases);
  expect(output).toMatchSnapshot();
});